[project]
name = "app"
version = "0.1.0"
description = ""
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi[standard]<1.0.0,>=0.114.2",
    "python-multipart<1.0.0,>=0.0.7",
    "tenacity<9.0.0,>=8.2.3",
    "pydantic>2.0",
    "emails<1.0,>=0.6",
    "jinja2<4.0.0,>=3.1.4",
    "httpx<1.0.0,>=0.25.1",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "sqlmodel<1.0.0,>=0.0.21",
    "aiosqlite<1.0.0,>=0.19.0",
    "bcrypt==4.0.1",
    "pydantic-settings<3.0.0,>=2.2.1",
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",
    "python-dotenv (>=1.1.0,<2.0.0)",
    # Structured logging with Loguru
    "loguru<1.0.0,>=0.7.2",
    "psycopg2-binary>=2.9.10",
    "pyrefly>=0.22.1",
]

[tool.uv]
dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",
    "pytest-asyncio<1.0.0,>=0.23.5",
    "ruff<1.0.0,>=0.2.2",
    "pre-commit<4.0.0,>=3.6.2",
    "coverage<8.0.0,>=7.4.3",
    "pytest-testmon>=2.1.3",
    "sqlacodegen>=3.0.0",
    "pytest-cov>=6.1.1",
]

[tool.pyrefly.errors]
import-error = true

[tool.poetry.group.dev.dependencies]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.ruff]
# General settings
line-length = 100
target-version = "py310"
respect-gitignore = true
exclude = [
    ".git", ".ruff_cache", ".venv", 
    "build", "dist", "__pypackages__", "__pycache__",
]

[tool.ruff.lint]
# More comprehensive selection of rules
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade (modernize Python code)
    "N",   # pep8-naming
    "FA",  # flake8-fastapi - FastAPI specific rules
    "RUF", # Ruff-specific rules
    "TCH", # Type checking
    "TID", # Import tidying
    "SIM", # Code simplification
    "ERA", # Eradicate commented-out code detection
    "S",   # Security checks (bandit)
    "D",   # Docstring quality (pydocstyle)
    "ARG", # Unused arguments check
    "PTH", # Pathlib vs os.path check
    "A",   # Builtins shadowing prevention
    "PERF",# Performance anti-patterns
    "C90", # McCabe complexity
]

# Ignores that complement pyright
ignore = [
    # Let pyright handle type checking
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN205", # Missing return type annotation for staticmethod
    "ANN206", # Missing return type annotation for classmethod
    
    # Common FastAPI patterns
    "FBT001", # Boolean positional arg in function definition (common in FastAPI query params)
    "FBT002", # Boolean default value in function definition
    
    # Project-specific needs
    "N815",   # Camel case variables (snake_case conflict in Prisma models)
    "RUF012", # Mutable class attributes (common in Pydantic models)
    
    # Other specific ignores
    "E501",   # Line too long (handled by formatter)
    
    # Docstring related ignores
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "D107",   # undocumented-public-init
    "D102",   # undocumented-public-method
    "D205",   # Multi-line docstring summary should start at the second line
    # Additional docstring formatting rules (common in your codebase)
    "D200",   # One-line docstring should fit on one line
    "D212",   # Multi-line docstring summary should start at first line
    "D415",   # First line should end with punctuation
    
    # Additional minor issues
    "D105",   # undocumented-magic-method
    "D202",   # blank-line-after-function
]

# Allow autofix for most enabled rules
fixable = ["ALL"]
unfixable = [
    "ERA001", # Don't auto-remove commented-out code
]

# Per-file overrides for special cases
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]       # Allow unused imports and * imports in __init__ files
"app/tests/**/*.py" = ["E501", "S101", "S311", "S105"]     # Allow long lines, assert statements, non-crypto random, and test passwords in tests
"app/api/**/*.py" = ["B008"]           # Function calls in argument defaults (common in FastAPI)
"app/models/**/*.py" = ["N815"]        # Allow camelCase in model files (for Prisma compatibility)
"app/models.py" = ["ALL"]              # Ignore all linting issues in autogenerated models.py file

# Module import settings
[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true

# Formatting options
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# Add docstring configuration
[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings to match your requirements


# -- Complexity guardrail -------------------------------------------------------
[tool.ruff.lint.mccabe]
max-complexity = 15   # >15 tends to stump LLM refactors; adjust as needed


[tool.codespell]
skip = "*.svg,Gemfile.lock"
write-changes = true

# Pyright configuration
[tool.pyright]
includePackages = ["app"]
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"

[tool.pyrefly]
python-version = "3.10.0"
